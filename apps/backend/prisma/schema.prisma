// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model Passenger {
  id                 Int      @id @default(autoincrement())
  name               String
  phone              String
  email              String   @unique
  disabilityType     String?
  accessibilityNeeds String?
  createdAt          DateTime @default(now())

  rides              Ride[]
}

model Driver {
  id            Int      @id @default(autoincrement())
  name          String
  phone         String
  email         String   @unique
  licenseNumber String
  status        DriverStatus   
  createdAt     DateTime @default(now())

  vehicles      Vehicle[]
  rides         Ride[]
}



model Vehicle {
  id                   Int      @id @default(autoincrement())
  driverId             Int
  plateNumber          String
  type                 VehicleType    
  accessibilityFeatures String?
  capacity             Int
  status               VehicleStatus   
  createdAt            DateTime @default(now())

  driver   Driver @relation(fields: [driverId], references: [id])
  rides    Ride[]
}



model Ride {
  id              Int      @id @default(autoincrement())
  passengerId     Int
  driverId        Int
  vehicleId       Int
  pickupLocation  String
  dropoffLocation String
  type            RideType   
  status          RideStatus   
  requestedAt     DateTime @default(now())
  completedAt     DateTime?

  passenger Passenger @relation(fields: [passengerId], references: [id])
  driver    Driver    @relation(fields: [driverId], references: [id])
  vehicle   Vehicle   @relation(fields: [vehicleId], references: [id])
  payment   Payment?
}



model Payment {
  id        Int      @id @default(autoincrement())
  rideId    Int      @unique
  donorId   Int?
  amount    Decimal  @db.Decimal(10,2)
  method    PaymentMethod   
  status    PaymentStatus   
  createdAt DateTime @default(now())

  ride  Ride   @relation(fields: [rideId], references: [id])
  donor Donor? @relation(fields: [donorId], references: [id])
}


model Donor {
  id               Int      @id @default(autoincrement())
  name             String
  type             DonorType  
  contactEmail     String?
  phone            String?
  contributionType ContributionType   
  createdAt        DateTime @default(now())

  payments Payment[]
}


model Admin {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  role      AdminRole  
  createdAt DateTime @default(now())
}


enum AdminRole{
  Dispatcher 
  Manager 
  Admin
}

enum DriverStatus{
  Available
  Unavailable 
  Suspended
}

enum VehicleType{
  Car
  Van
  Bus
}

enum VehicleStatus{
  Active
  Inactive
}

enum RideType{
  Healthcare
  Personal
  Work
}

enum RideStatus{
  Requested
  Assigned
  In_progress
  Completed
  Cancelled
}

enum PaymentMethod{
  Cash
  Subsidy
  Donation
  Card
}

enum PaymentStatus{
  Pending
  Completed
  Failed
}

enum DonorType{
  NGO
  Government
  Corporate_CSR
  Individual
}

enum ContributionType{
  One_Time_Grant
  Per_Ride_Subsidy
  Vehicle_Donation
}